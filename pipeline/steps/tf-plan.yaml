parameters:
  - name: subscriptionName
    type: string
  - name: env
    type: string
  - name: certName
    type: string
  - name: location
    type: string
  - name: product
    type: string

steps:
  - task: AzurePowerShell@5
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      ScriptType: 'InlineScript'
      Inline: |
        $Context = Get-AzContext
        $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
        $ObjectId = $AzureDevOpsServicePrincipal.Id
        echo "##vso[task.setvariable variable=oid]$ObjectId"
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true

  - task: AzureCLI@2
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # echo "SECRETS ###########"
        # az keyvault secret list --vault-name $(kv_name_prefix)-${{ parameters.env }}
        # echo "CERTS ###########"
        # az keyvault certificate list --vault-name $(kv_name_prefix)-${{ parameters.env }}
        # ensure KV exists in same sub we are working in
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        oid=$(oid)
        echo "Logged in as oid $oid"
        echo "Creating Shared RG $rgName"
        az group create --location ${{ parameters.location }} --name $rgName  --subscription ${{ parameters.subscriptionName }}
        echo "Creating Shared KV $kvName"
        newKv=$(az keyvault create --location ${{ parameters.location }} --name $kvName --resource-group $rgName --subscription ${{ parameters.subscriptionName }} --enabled-for-deployment true --enabled-for-template-deployment true)
        echo "Grant Service connection permissions on the KV"
        az keyvault set-policy --name $kvName \
          --certificate-permissions backup create get import list listissuers recover restore update \
          --secret-permissions backup delete get list recover restore set \
          --object-id $oid
        echo "Add build agent ip $agentIp to KV $kvName"
        agentIp=$(curl http://ifconfig.me/ip)/32
        az keyvault network-rule add \
          --resource-group $rgName \
          --name $kvName \
          --ip-address $agentIp
        # Whitelist the subnet the VMs are on (if they are there)
        subnetId=$(az network vnet subnet show --resource-group "cvp-recordings-${{ parameters.env }}-rg" --vnet-name "cvp-recordings-${{ parameters.env }}-vnet" --name "wowza" --query id --output tsv)
        echo "Adding vm subnet ${subnetId} to KV"
        az keyvault network-rule add --resource-group $rgName --name $kvName --subnet $subnetId
        echo "Default Deny other traiffic apart form Azure Services"
        az keyvault update \
          --resource-group $rgName \
          --name $kvName \
          --bypass AzureServices \
          --default-action Deny
        echo "Copy wildcard cert from cftapps"
        az keyvault secret download --id https://$(kv_name_prefix)-${{ parameters.env }}.vault.azure.net/secrets/${{ parameters.certName }} -f cert.pfx
        base64 -d cert.pfx > cert-up.pfx
        echo "Import the cert to our new KV $kvName"
        az keyvault certificate import --file cert-up.pfx --vault-name $kvName --name ${{ parameters.certName }} --verbose
        echo "Download the cert as a pem file"
        az keyvault certificate download --id https://$kvName.vault.azure.net/certificates/${{ parameters.certName }} -f cert.pem
        certPath=`pwd`/cert.pem
        echo "Capture cert thumbprint and secret resource id"
        cert=$(az keyvault certificate show --id https://$kvName.vault.azure.net/certificates/${{ parameters.certName }})
        thumbprint=$(echo $cert | jq .x509ThumbprintHex)
        secretId=$(echo $cert | jq .sid)
        kvId=$(echo $newKv | jq .id)
        echo "Check if the ssh keypair is there, else generate one"
        sshPrivKeyName="cvp-ssh-priv-key"
        sshPubKeyName="cvp-ssh-pub-key"
        sshResult=$(az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv)
        echo "az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv"
        echo "sshResult = ${sshResult}"
        pubKey=$sshResult
        if [ "$sshResult" = "" ]; then
          echo "Create new SSH keypair"
          ssh-keygen -f ./cvp -t rsa -b 4096 -q -N ""
          az keyvault secret set --name ${sshPrivKeyName} --vault-name ${kvName} --file ./cvp
          az keyvault secret set --name ${sshPubKeyName} --vault-name ${kvName} --file ./cvp.pub
          pubKey=`cat ./cvp.pub`
        fi
        echo "##vso[task.setvariable variable=certPath]$certPath"
        echo "##vso[task.setvariable variable=secretId]$secretId"
        echo "##vso[task.setvariable variable=thumbprint]$thumbprint"
        echo "##vso[task.setvariable variable=kvId]$kvId"
        echo "##vso[task.setvariable variable=pubKey]$pubKey"
  - task: AzureCLI@2
    condition: always()
    displayName: Remove Build Agent IP from KV whitelist
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        agentIp=$(curl http://ifconfig.me/ip)/32
        echo "Removing agent ip $agentIp from KV"
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        az keyvault network-rule remove \
          --resource-group $rgName \
          --name $kvName \
          --ip-address $agentIp
  - task: AzureCLI@2
    displayName: Get Log Analytics Workspace Subscription ID by name
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        subscriptionId=$(az account show -s $(ws_sub_name) --query id -o tsv)
        echo "$(ws_sub_name) == ${subscriptionId}"
        echo "##vso[task.setvariable variable=ws_sub_id]$subscriptionId"
  - task: TerraformCLI@0
    displayName: Plan
    inputs:
      command: 'plan'
      environmentServiceName: ${{ parameters.subscriptionName }}
      commandOptions: '-var "common_tags={\"environment\":\"${{ parameters.env }}\",\"teamName\":\"$(product)\",\"BuiltFrom\":\"$(builtFrom)\"}" -var "location=$(location)" -var "product=$(product)" -var "env=${{ parameters.env }}" -var "cert_path=$(certPath)" -var "service_certificate_kv_url=$(secretId)" -var "thumbprint=$(thumbprint)" -var "key_vault_id=$(kvId)" -var "wowza_sku=$(wowza_sku)" -var "wowza_version=$(wowza_version)" -var "wowza_publisher=$(wowza_publisher)" -var "wowza_offer=$(wowza_offer)" -var "dns_zone_name=$(dns_zone_name)" -var "dns_resource_group=$(dns_resource_group)" -var "address_space=$(address_space)" -var "num_applications=$(num_applications)" -var "ssh_public_key=$(pubKey)" -var "rtmps_source_address_prefixes=[$(rtmps_source_address_prefixes)]" -var "ws_name=$(ws_name)" -var "ws_rg=$(ws_rg)" -var "ws_sub_id=$(ws_sub_id)" -out="${{ parameters.env }}.tfplan" -no-color -input=false'
